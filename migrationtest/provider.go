// Code generated by MockGen. DO NOT EDIT.
// Source: entities.go

// Package migrationtest is a generated GoMock package.
package migrationtest

import (
	context "context"
	sql "database/sql"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockDbProvider is a mock of DbProvider interface.
type MockDbProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDbProviderMockRecorder
}

// MockDbProviderMockRecorder is the mock recorder for MockDbProvider.
type MockDbProviderMockRecorder struct {
	mock *MockDbProvider
}

// NewMockDbProvider creates a new mock instance.
func NewMockDbProvider(ctrl *gomock.Controller) *MockDbProvider {
	mock := &MockDbProvider{ctrl: ctrl}
	mock.recorder = &MockDbProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbProvider) EXPECT() *MockDbProviderMockRecorder {
	return m.recorder
}

// CreateMigrationsTable mocks base method.
func (m *MockDbProvider) CreateMigrationsTable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMigrationsTable")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMigrationsTable indicates an expected call of CreateMigrationsTable.
func (mr *MockDbProviderMockRecorder) CreateMigrationsTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMigrationsTable", reflect.TypeOf((*MockDbProvider)(nil).CreateMigrationsTable))
}

// DeleteApplied mocks base method.
func (m *MockDbProvider) DeleteApplied(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplied", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplied indicates an expected call of DeleteApplied.
func (mr *MockDbProviderMockRecorder) DeleteApplied(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplied", reflect.TypeOf((*MockDbProvider)(nil).DeleteApplied), arg0, arg1)
}

// GetApplied mocks base method.
func (m *MockDbProvider) GetApplied(arg0 context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplied", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplied indicates an expected call of GetApplied.
func (mr *MockDbProviderMockRecorder) GetApplied(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplied", reflect.TypeOf((*MockDbProvider)(nil).GetApplied), arg0)
}

// GetDb mocks base method.
func (m *MockDbProvider) GetDb() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDb")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDb indicates an expected call of GetDb.
func (mr *MockDbProviderMockRecorder) GetDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDb", reflect.TypeOf((*MockDbProvider)(nil).GetDb))
}

// MarkApplied mocks base method.
func (m *MockDbProvider) MarkApplied(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkApplied", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkApplied indicates an expected call of MarkApplied.
func (mr *MockDbProviderMockRecorder) MarkApplied(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkApplied", reflect.TypeOf((*MockDbProvider)(nil).MarkApplied), arg0, arg1, arg2)
}
